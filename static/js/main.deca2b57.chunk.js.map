{"version":3,"sources":["InfoBox.js","LineGraph.js","util.js","Circles.js","Map.js","Table.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","Card","className","style","flex","margin","textAlign","CardContent","Typography","color","options","legend","elements","points","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","display","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","casesType","chartData","date","newDataPoint","x","y","push","useEffect","a","fetch","then","res","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","numberWithCommas","lastThree","toString","substring","otherNumbers","replace","CircularProgress","caseTypeColors","multiplier","recovered","active","deaths","Circles","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","Math","sqrt","Popup","Map","countries","zoom","setmap","setView","whenCreated","TileLayer","url","attribution","LayerGroup","Table","sort","b","fontSize","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setmapCountries","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.deca2b57.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\nfunction InfoBox({title,cases,total}) {\r\n    return (\r\n        <Card className='infoBox' style={{flex:1,margin:'4vw',textAlign:'center'}}>\r\n            <CardContent>\r\n                <Typography className='infoBox_title' color='textSecondary'>\r\n                    {title}\r\n                </Typography>\r\n                <h2 className='infoBox_cases'>{total}</h2>\r\n                <Typography className='infoBox_total' color='textSecondary'>\r\n                    Today - {cases}\r\n                </Typography>\r\n            </CardContent>            \r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import numeral from 'numeral'\r\nimport React, { useEffect, useState } from 'react'\r\nimport {Line} from 'react-chartjs-2'\r\n\r\nconst options = {\r\n    legend:'per day cases',\r\n    elements:{\r\n        points:{\r\n            radius:0\r\n        }\r\n    },\r\n    maintainAspectRatio:false,\r\n    tooltips:{\r\n        mode:'index',\r\n        intersect:false,\r\n        callbacks:{\r\n            label: function(tooltipItem,data){\r\n                return numeral(tooltipItem.value).format('+0,0')\r\n            }\r\n        }\r\n    },\r\n    scales:{\r\n        xAxes:[{\r\n            type:'time',\r\n            time:{\r\n                format:'MM/DD/YY',\r\n                tooltipFormat:'ll'\r\n            }\r\n        }],\r\n        yAxes:[{\r\n            gridLines:{\r\n                display:false\r\n            },\r\n            ticks:{\r\n                callback:function(value,index,values){\r\n                    return numeral(value).format('0a')\r\n                }\r\n            }\r\n        }]\r\n        \r\n    }\r\n}\r\n\r\nexport default function LineGraph() {\r\n    const [data, setData] = useState({})\r\n    const [type, setType] = useState('cases')\r\n\r\n\r\n    const buildChartData = (data,casesType='cases') => {\r\n        const chartData = []\r\n        let lastDataPoint;\r\n        for(let date in data[casesType]) {\r\n            if(lastDataPoint){\r\n                const newDataPoint = {\r\n                    x:date,\r\n                    y:data[casesType][date]-lastDataPoint\r\n                }\r\n                chartData.push(newDataPoint)\r\n            }\r\n            lastDataPoint=data[casesType][date]            \r\n        };\r\n        return chartData\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n            .then((res)=>res.json())\r\n            .then((data)=>{\r\n                console.log(data['cases']);\r\n                setData(buildChartData(data,type))\r\n            })\r\n        }\r\n\r\n        fetchData()\r\n        \r\n\r\n    }, [])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n        {data?.length>0 && (\r\n            <Line\r\n                options={options}\r\n                data={{\r\n                    datasets:[{\r\n                        backgroundColor:'rgba(204,16,52,0.5)',\r\n                        borderColor:'#cc1034',\r\n                        data:data\r\n                    }]\r\n                }}\r\n            />\r\n        )}\r\n        </div>\r\n    )\r\n}\r\n","import { CircularProgress } from \"@material-ui/core\";\r\n\r\nexport const numberWithCommas = (x) => {\r\n    x=x?.toString();\r\n    var lastThree = x?.substring(x.length-3);\r\n    var otherNumbers = x?.substring(0,x.length-3);\r\n    if(otherNumbers !== '')\r\n        lastThree = ',' + lastThree;\r\n    var res = otherNumbers?.replace(/\\B(?=(\\d{2})+(?!\\d))/g, \",\") + lastThree;\r\n    // return x?.toString().replace(/\\B(?=(\\d{2})+(?!\\d))/g, ',');  International System\r\n    return x ? res : <CircularProgress color=\"secondary\"/>\r\n}\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    return sortedData.sort((a,b)=>(a.cases>b.cases?-1:1))\r\n}\r\n\r\nexport const caseTypeColors = {\r\n    cases: {\r\n        color: \"#cc1034\",\r\n        multiplier: 800\r\n    },\r\n    recovered: {\r\n        color: \"#7dd71d\",\r\n        multiplier: 800\r\n    },\r\n    active: {\r\n        color: \"#1769aa\",\r\n        multiplier: 800\r\n    },\r\n    deaths: {\r\n        color: \"#333\",\r\n        multiplier: 1200\r\n    }\r\n}","import React from 'react'\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nimport { caseTypeColors, numberWithCommas } from './util';\r\n\r\nexport default function Circles({data,casesType='cases'}) {\r\n    return (\r\n        data.map(country=>(\r\n            <Circle\r\n                center = {[country.countryInfo.lat,country.countryInfo.long]}\r\n                fillOpacity={0.2}\r\n                color={caseTypeColors[casesType].color}\r\n                fillColor={caseTypeColors[casesType].color}\r\n                radius={\r\n                    Math.sqrt(country[casesType])*caseTypeColors[casesType].multiplier/2\r\n                }\r\n            >\r\n                <Popup>\r\n                    <h1>{country.country}</h1>\r\n                    <h3>{numberWithCommas(country[casesType])}</h3>\r\n                </Popup>\r\n            </Circle>\r\n        ))\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport {LayerGroup, MapContainer as LeafletMap,TileLayer} from \"react-leaflet\"\r\nimport Circles from './Circles';\r\nimport './Map.css'\r\n\r\nexport default function Map({countries,casesType,center,zoom}) {\r\n    const [map, setmap] = useState(null);\r\n    if (map) {\r\n        // map.flyTo(center);\r\n        map.setView(center, zoom);\r\n    }\r\n    // const circles = showDataOnMap(countries,casesType)\r\n    // console.log('Circles>>>>>>>>>>>>>>>',circles);\r\n    return (\r\n        <div className='map'>\r\n            <LeafletMap center={center} zoom={zoom} whenCreated={setmap}>\r\n                <TileLayer\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                        attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n                    >\r\n                </TileLayer>\r\n                <LayerGroup>\r\n                    <Circles data={countries}/>\r\n                </LayerGroup>\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './Table.css'\r\nimport { numberWithCommas, sortData } from './util'\r\n\r\nexport default function Table({countries}) {\r\n    countries = sortData(countries)\r\n    return (\r\n        <div className='table'>\r\n            <tr style={{fontSize:'1.3em'}}>\r\n                <td><strong>Country</strong></td>\r\n                <td><strong>Cases</strong></td>\r\n            </tr>         \r\n            {countries.map(country=>(\r\n                <tr>\r\n                    <td>{country.country}</td>\r\n                    <td><strong>{numberWithCommas(country.cases)}</strong></td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n","import { Card, CardContent, CircularProgress, FormControl, MenuItem, Select} from '@material-ui/core';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport InfoBox from './InfoBox';\nimport LineGraph from './LineGraph';\nimport Map from './Map';\nimport Table from './Table';\nimport {numberWithCommas} from './util';\nimport 'leaflet/dist/leaflet.css';\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('Worldwide')\n  const [countryInfo, setCountryInfo] = useState({})\n  const [tableData, setTableData] = useState([])\n  const [mapCenter, setMapCenter] = useState({lat:20,lng:77})\n  const [mapZoom, setMapZoom] = useState(3)\n  const [mapCountries, setmapCountries] = useState([])\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch('https://disease.sh/v3/covid-19/countries/')\n      .then((res)=>res.json())\n      .then((data)=>{\n        const countries = data.map(country=>(\n          {\n            name:country.country,\n            value:country.countryInfo.iso2\n          }\n        ))\n        setTableData(data)\n        setCountries(countries)\n        setmapCountries(data)\n      })\n      await fetch('https://disease.sh/v3/covid-19/all')\n      .then((res)=>res.json())\n      .then(data=>{\n        setCountryInfo(data)\n      })\n    }\n    getCountriesData()\n  }, [])\n\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value\n    const url = countryCode === 'Worldwide' ? 'https://disease.sh/v3/covid-19/all':`https://disease.sh/v3/covid-19/countries/${countryCode}`\n    await fetch(url)\n    .then((res)=>res.json())\n    .then(data=>{\n      setCountry(countryCode)\n      setCountryInfo(data)\n      // setMapCenter([data.countryInfo.lat,data.countryInfo.long])\n      setMapCenter({\n        lat:data.countryInfo.lat,\n        lng:data.countryInfo.long\n      })\n      setMapZoom(4)\n    })\n  }\n \n  return (\n    <div className=\"app\">\n      <div className='app_left'>\n        <div className='app_header'>\n          <h1>Covid Tracker</h1>\n          <FormControl className='app_dropdown'>\n            <Select\n              variant='outlined'\n              value={country}\n              onChange={onCountryChange}\n              >\n              <MenuItem value='Worldwide'>Worldwide</MenuItem>\n              {\n                countries.sort().map(country=>(\n                  <MenuItem key={country.name} value={country.value}>{country.name}</MenuItem>\n                ))\n              }\n            </Select>\n          </FormControl>\n        </div>\n        <div className='app_stats'>\n              <InfoBox \n                title='Coronavirus Cases' \n                total={numberWithCommas(countryInfo.cases)} \n                cases={numberWithCommas(countryInfo.todayCases)}/>\n              <InfoBox \n                title='Recovered' \n                total={numberWithCommas(countryInfo.recovered)} \n                cases={numberWithCommas(countryInfo.todayRecovered)}/>\n              <InfoBox \n                title='Deaths' \n                total={numberWithCommas(countryInfo.deaths)} \n                cases={numberWithCommas(countryInfo.todayDeaths)}/>\n        </div>\n        <Map \n          countries={mapCountries}\n          casesType='cases'\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n\n      <Card className='app_right'>\n        <CardContent>\n          <h3>Live Cases by Countries</h3>\n          <Table countries={tableData}/>\n          <h3>Worldwide New Cases</h3>\n          <LineGraph/>\n        </CardContent>\n      </Card>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}